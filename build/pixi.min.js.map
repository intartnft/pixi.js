{"version":3,"file":"pixi.min.js","mappings":"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","sources":["webpack://Pixi/webpack/bootstrap","webpack://Pixi/webpack/runtime/define property getters","webpack://Pixi/webpack/runtime/hasOwnProperty shorthand","webpack://Pixi/./src/pixi/core/Color.js","webpack://Pixi/./src/pixi/core/Events.js","webpack://Pixi/./src/pixi/core/Utils.js","webpack://Pixi/./src/pixi/core/Scene.js","webpack://Pixi/./src/pixi/core/Shape.js","webpack://Pixi/./src/pixi/effects/PixelColorChange.js","webpack://Pixi/./src/pixi/effects/PixelDistort.js","webpack://Pixi/./src/pixi/Pixi.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","class Color {\n    constructor() {\n        this.r = 0\n        this.g = 0\n        this.b = 0\n        this.a = 0\n    }\n\n    static fromHex(hex) {\n        let color = new Color()\n        let rgba = hexToRgbA(hex)\n        color.r = rgba[0]\n        color.g = rgba[1]\n        color.b = rgba[2]\n        color.a = 1\n        return color\n    }\n\n    static fromRGBA(r, g, b, a) {\n        let color = new Color()\n        color.r = r\n        color.g = g\n        color.b = b\n        color.a = a\n        return color\n    }\n\n    format() {\n        return \"rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\"\n    }\n\n    clone() {\n        return Color.fromRGBA(this.r, this.g, this.b, this.a)\n    }\n}\n\nconst hexToRgbA = (hex) => {\n    let c;\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        c = hex.substring(1).split('');\n        if (c.length == 3) {\n            c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n        c = '0x' + c.join('');\n        return [(c >> 16) & 255, (c >> 8) & 255, c & 255]\n    }\n    throw new Error('Bad Hex');\n}\n\nexport default Color","const events = {}\n\nclass Events {\n    addListener(event, listener, block) {\n        if (events[event]) {\n            events[event].push({block, listener})\n        }else{\n            events[event] = [{block, listener}]\n        }\n    }\n\n    removeListener(listener) {\n        events = events.filter(event => {\n            return event.listener != listener\n        })\n    }\n\n    fire(event, data) {\n        if (events[event]) {\n            events[event].forEach(event => {\n                event.block(data)\n            });\n        }\n    }\n}\n\nexport default Events","let def = (configItem, defaultValue) => {\n    if (configItem) {\n        return configItem\n    }\n    return defaultValue\n}\n\nconst Utils = {def}\nexport default Utils","import Utils from \"./Utils.js\"\nconst def = Utils.def\n\nclass Scene {\n    constructor(config) {\n        this.shapes = []\n        this.canvas = config.canvas;\n        this.ctx = config.canvas.getContext('2d');\n        this.scenePixelSize = def(config.scenePixelSize, { width: 50, height: 50 })\n        this.pixelSize = def(config.pixelSize, 10)\n        this.sceneOffset = def(config.sceneOffset, { x: 0, y: 0 })\n        this.pointer = def(config.pointer, { x: 0, y: 0 })\n        this.isStatic = def(config.isStatic, false)\n        this.backgroundColor = def(config.backgroundColor, \"#ffffff\")\n        this.minPixelSize = def(config.minPixelSize, 2)\n    }\n\n    addShape(shape) {\n        this.shapes.push(shape)\n    }\n\n    addShapes(shapes) {\n        shapes.forEach(shape => {\n            this.shapes.push(shape)\n        })\n    }\n\n    centerShape(shape) {\n        shape.x = Math.floor(this.scenePixelSize.width * 0.5)\n        shape.y = Math.floor(this.scenePixelSize.height * 0.5)\n    }\n\n    centerShapes(shapes) {\n        shapes.forEach(shape => {\n            shape.x = Math.floor(this.scenePixelSize.width * 0.5)\n            shape.y = Math.floor(this.scenePixelSize.height * 0.5)\n        })\n    }\n\n    render() {\n        this.clear()\n        this.shapes.forEach(shape => {\n            if (shape.image) {\n                this.drawImage(shape)\n            } else if (shape.pixels) {\n                this.drawPixels(shape)\n            }\n        });\n    }\n\n    clear() {\n        this.ctx.fillStyle = this.backgroundColor\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    fitInSize(size) {\n        if (size.width > size.height) {\n            this.pixelSize = Math.round(size.height / this.scenePixelSize.height)\n        } else {\n            this.pixelSize = Math.round(size.width / this.scenePixelSize.width)\n        }\n        this.pixelSize = Math.max(this.pixelSize, this.minPixelSize)\n        this.sceneOffset.x = (size.width - (this.pixelSize * this.scenePixelSize.width)) * 0.5\n        this.sceneOffset.y = (size.height - this.pixelSize * this.scenePixelSize.height) * 0.5\n    }\n\n    drawPixels(shape) {\n        if (!shape.visible) { return }\n        shape.pixels.forEach(pixel => {\n            shape.effects.forEach(effect => {\n                effect.render(pixel)\n            })\n            let offsetX = 0\n            let offsetY = 0\n            if (!this.isStatic) {\n                let px = ((this.pointer.x / this.canvas.width) - 0.5) * 2\n                let py = ((this.pointer.y / this.canvas.height) - 0.5) * 2\n                offsetX = px * shape.pointerOffset\n                offsetY = py * shape.pointerOffset\n            }\n            this.ctx.globalCompositeOperation = shape.blendMode\n            this.ctx.fillStyle = pixel.color.format()\n            this.ctx.globalAlpha = shape.opacity\n            let px = this.sceneOffset.x + (pixel.x + shape.x + offsetX) * this.pixelSize\n            let py = this.sceneOffset.y + (pixel.y + shape.y + offsetY) * this.pixelSize\n            px = Math.round(px / this.pixelSize) * this.pixelSize\n            py = Math.round(py / this.pixelSize) * this.pixelSize\n            this.ctx.fillRect(px, py, this.pixelSize, this.pixelSize)\n            this.ctx.globalAlpha = 1\n        })\n    }\n\n    drawImage(shape) {\n        if (!shape.visible) { return }\n        if (!shape.image) { return }\n        let image = shape.image\n        this.ctx.imageSmoothingEnabled = false\n        let offsetX = 0\n        let offsetY = 0\n        if (!this.isStatic) {\n            let px = ((this.pointer.x / this.canvas.width) - 0.5) * 2\n            let py = ((this.pointer.y / this.canvas.height) - 0.5) * 2\n            offsetX = px * shape.pointerOffset\n            offsetY = py * shape.pointerOffset\n        }\n        this.ctx.globalCompositeOperation = shape.blendMode\n        this.ctx.globalAlpha = shape.opacity\n        let px = this.sceneOffset.x + (shape.x + offsetX) * this.pixelSize - (image.width * this.pixelSize) * 0.5\n        let py = this.sceneOffset.y + (shape.y + offsetY) * this.pixelSize - (image.height * this.pixelSize) * 0.5\n        px = Math.round(px / this.pixelSize) * this.pixelSize\n        py = Math.round(py / this.pixelSize) * this.pixelSize\n        this.ctx.drawImage(image, 0, 0, image.width, image.height, px, py, image.width * this.pixelSize, image.height * this.pixelSize);\n    }\n}\n\nexport default Scene","import Events from \"./Events.js\"\nimport Color from \"./Color.js\"\n\nclass Shape {\n    constructor(object) {\n        this.visible = true\n        this.opacity = 1\n        this.blendMode = \"\"\n        this.pixels = []\n        this.effects = []\n        this.isReady = false\n        this.events = new Events()\n        if (object) {\n            this.parse(object)\n        }\n    }\n\n    addEffect(effect) {\n        this.effects.push(effect)\n    }\n\n    addEffects(effects) {\n        effects.forEach(effect => {\n            this.effects.push(effect)\n        })\n    }\n\n    parse(object) {\n        if (object.pixels) {\n            this.parseWithPixels(object)\n        } else if (object.image) {\n            this.parseWithImage(object)\n        }\n    }\n\n    parseWithPixels(object) {\n        this.rawObject = object\n        let boundry = { min: { x: 0, y: 0 }, max: { x: 0, y: 0 } }\n        object.pixels.forEach(pixel => {\n            boundry.max.x = Math.max(boundry.max.x, pixel.x)\n            boundry.max.y = Math.max(boundry.max.y, pixel.y)\n            boundry.min.x = Math.min(boundry.min.x, pixel.x)\n            boundry.min.y = Math.min(boundry.min.y, pixel.y)\n        })\n        let center = {\n            x: Math.floor((boundry.max.x - boundry.min.x) * 0.5),\n            y: Math.floor((boundry.max.y - boundry.min.y) * 0.5),\n        }\n        let pixels = []\n        object.pixels.forEach(pixelData => {\n            let px = pixelData.x - center.x\n            let py = pixelData.y - center.y\n            let color\n            if (pixelData.color instanceof Color) {\n                color = pixelData.color\n            } else {\n                color = Color.fromHex(pixelData.color)\n            }\n            if (object.ignoreTransparentPixels && color.a == 0) {\n                return\n            }\n            let pixel = {\n                x: px,\n                y: py,\n                color: color\n            }\n            pixels.push(pixel)\n        })\n\n        this.boundry = boundry\n        this.pixels = pixels\n        this.pointerOffset = object.pointerOffset\n        this.x = center.x\n        this.y = center.y\n        this.isReady = true\n        this.events.fire(\"shapeIsReady\", this)\n    }\n\n    parseWithImage(object) {\n        loadImage(object.image, (image) => {\n            if (object.pixelated) {\n                object.pixels = parseImagePixels(\n                    image\n                )\n                this.parseWithPixels(object)\n                return\n            }\n            this.image = image\n            this.boundry = { min: { x: 0, y: 0 }, max: { x: image.width, y: image.height } }\n            this.pointerOffset = object.pointerOffset\n            this.x = 0\n            this.y = 0\n            this.isReady = true\n            this.events.fire(\"shapeIsReady\", this)\n        })\n    }\n}\n\nlet parseImagePixels = (image) => {\n    let canvas = document.createElement(\"canvas\")\n    let ctx = canvas.getContext(\"2d\")\n    ctx.drawImage(image, 0, 0)\n    let width = image.width\n    let height = image.height\n    let imageData = ctx.getImageData(0, 0, width, height)\n    let rgba = imageData.data\n    let pixels = []\n    for (var i = 0; i < width; i += 1) {\n        for (var j = 0; j < height; j += 1) {\n            let p = (j * width + i) * 4\n            let r = rgba[p]\n            let g = rgba[p + 1]\n            let b = rgba[p + 2]\n            let a = rgba[p + 3]\n            pixels.push({\n                x: i,\n                y: j,\n                color: Color.fromRGBA(r, g, b, a)\n            })\n        }\n    }\n    return pixels\n}\n\nlet loadImage = (src, completion) => {\n    let image = new Image()\n    image.onload = () => {\n        completion(image)\n    }\n    image.src = src\n}\n\nexport default Shape","import Utils from \"../core/Utils.js\"\nconst def = Utils.def\n\nclass PixelColorChange {\n    constructor(shape, config) {\n        this.shape = shape\n        this.smoothness = def(config.smoothness, 0.1)\n\n        if (shape.isReady) {\n            this.configure(shape)\n        } else {\n            shape.events.addListener(\"shapeIsReady\", this, (shape) => {\n                this.configure(shape)\n            })\n        }\n    }\n\n    configure(shape) {\n        shape.pixels.forEach(pixel => {\n            pixel.colorChange = {\n                originalColor: pixel.color.clone(),\n                targetColor: pixel.color.clone()\n            }\n        })\n    }\n\n    render(pixel) {\n        if (!pixel.colorChange) { return }\n        let targetColor = pixel.colorChange.targetColor\n        pixel.color.r += Math.floor((targetColor.r - pixel.color.r) * this.smoothness)\n        pixel.color.g += Math.floor((targetColor.g - pixel.color.g) * this.smoothness)\n        pixel.color.b += Math.floor((targetColor.b - pixel.color.b) * this.smoothness)\n        pixel.color.a += Math.floor((targetColor.a - pixel.color.a) * this.smoothness)\n    }\n}\n\nexport default PixelColorChange","import Utils from \"../core/Utils.js\"\nconst def = Utils.def\n\nclass PixelDistort {\n    constructor(shape, configProvider) {\n        this.shape = shape\n        this.enabled = false\n        this.configProvider = configProvider\n\n        if (shape.isReady) {\n            this.configure(shape)\n        } else {\n            shape.events.addListener(\"shapeIsReady\", this, (shape) => {\n                this.configure(shape)\n            })\n        }\n    }\n\n    configure(shape) {\n        shape.pixels.forEach(pixel => {\n            let config = this.configProvider(pixel)\n            pixel.distort = {\n                radius: def(config.radius, 10),\n                speed: def(config.speed, 0.01),\n                smoothness: def(config.smoothness, 0.1),\n                tick: def(config.tick, Math.random() * Math.PI * 2),\n                ox: pixel.x,\n                oy: pixel.y,\n            }\n        })\n    }\n\n    render(pixel) {\n        let distort = pixel.distort\n        if (!distort) { return }\n        if (this.enabled) {\n            let px = Math.sin(distort.tick) * distort.radius\n            let py = Math.cos(distort.tick) * distort.radius\n            pixel.x += (px - pixel.x) * distort.smoothness\n            pixel.y += (py - pixel.y) * distort.smoothness\n        } else {\n            pixel.x += (pixel.distort.ox - pixel.x) * distort.smoothness\n            pixel.y += (pixel.distort.oy - pixel.y) * distort.smoothness\n        }\n        distort.tick += distort.speed\n    }\n}\n\nexport default PixelDistort","import Color from \"./core/Color.js\"\nimport Events from \"./core/Events.js\"\nimport Scene from \"./core/Scene.js\"\nimport Shape from \"./core/Shape.js\"\nimport Utils from \"./core/Utils.js\"\nimport PixelColorChange from \"./effects/PixelColorChange.js\"\nimport PixelDistort from \"./effects/PixelDistort.js\"\n\nconst Pixi = {Color, Events, Scene, Shape, Utils, PixelColorChange, PixelDistort}\n\nexport default Pixi"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Color","constructor","this","r","g","b","a","static","hex","color","rgba","hexToRgbA","format","clone","fromRGBA","c","test","substring","split","length","join","Error","events","addListener","event","listener","block","push","removeListener","filter","fire","data","forEach","def","configItem","defaultValue","config","shapes","canvas","ctx","getContext","scenePixelSize","width","height","pixelSize","sceneOffset","x","y","pointer","isStatic","backgroundColor","minPixelSize","addShape","shape","addShapes","centerShape","Math","floor","centerShapes","render","clear","image","drawImage","pixels","drawPixels","fillStyle","fillRect","fitInSize","size","round","max","visible","pixel","effects","effect","offsetX","offsetY","px","py","pointerOffset","globalCompositeOperation","blendMode","globalAlpha","opacity","imageSmoothingEnabled","object","isReady","parse","addEffect","addEffects","parseWithPixels","parseWithImage","rawObject","boundry","min","center","pixelData","ignoreTransparentPixels","src","completion","Image","onload","loadImage","pixelated","document","createElement","getImageData","i","j","p","parseImagePixels","smoothness","configure","colorChange","originalColor","targetColor","configProvider","enabled","distort","radius","speed","tick","random","PI","ox","oy","sin","cos"],"sourceRoot":""}